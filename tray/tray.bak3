
mdir={(0,1),(1,0)}

def inbound(m,p):
	return 0<=p<m*3

def nextcoords(m,p):
	return p+1


cache={}

def count_trays(shelf,m,p):
	if (shelf,p) in cache:
		return cache[(shelf,p)]
	if inbound(m,p) and shelf&bits[p]:
		npos=nextcoords(m,p)
		cache[(shelf,p)]=count_trays(shelf,m,npos)
		return cache[(shelf,p)]	
	if not inbound(m,p):
		return 1
	# if (x,y)==(2,m-1):
	# 	return 1
	ans=0
	shelf|=bits[p]
	npos=nextcoords(m,p)
	ans+=count_trays(shelf,m,npos)
	for dx,dy in mdir:
		pos=p+m*dx+dy
		if not inbound(m,pos):
			continue
		if not shelf&bits[pos]:
			shelf|=bits[pos]
			ans+=count_trays(shelf,m,npos)
			shelf^=bits[pos]
	#print x,y,ans
	shelf^=bits[p]
	cache[(shelf,p)]=ans
	return ans

def getbitpos(m,x,y):
	return m*x+y


m,n = map(int,raw_input().split())

shelf = 0

bits=[1]
for i in xrange(1,73):
	bits.append(bits[-1]<<1)

if n:
	leaks=map(float, raw_input().split())
	while leaks:
		y,x=leaks[:2]
		leaks[:2]=[]
		shelf|=bits[getbitpos(m,int(x),int(y))]

ibs={(i,j) for i in xrange(3) for j in xrange(m)}

print count_trays(shelf,m,0)




